plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2020.3.2"
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

def ROBOT_MAIN_CLASS = "frc.team6027.robot.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roboRIO("roborio") {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = frc.getTeamNumber()
        }
    }
    artifacts {
        // See JacisNonsense project and GradleRIO project for 
        frcJavaArtifact('frcJava') {
            targets << "roborio"
            // Debug can be overridden by command line, for use with VSCode
            debug = frc.getDebugOrDefault(false)
            // Save off a heap dump on the rio if we run out of memory
            jvmArgs = ["-XX:+HeapDumpOnOutOfMemoryError", "-XX:HeapDumpPath=/home/lvuser"]
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact('frcStaticFileDeploy') {
            // The directory below is the local directory to deploy
            files = fileTree(dir: 'src/main/deploy')
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = '/home/lvuser/deploy'
        }
    }
}

// Set this to true to enable desktop support.
def includeDesktopSupport = false
repositories {
    jcenter()
    mavenCentral()
    /*
    maven {
        name 'frcHome'
        url gradle.ext.frcHomeMaven
    }
    */
}

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
    implementation wpi.deps.wpilib()
    nativeZip wpi.deps.wpilibJni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.wpilibJni(wpi.platforms.desktop)
    // implementation 'edu.wpi.first.wpilibOldCommands:wpilibOldCommands-java:2020.1.2'

    implementation wpi.deps.vendor.java()
    nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)

    testImplementation 'junit:junit:4.12'

    // Enable simulation gui support. Must check the box in vscode to enable support
    // upon debugging
    simulation wpi.deps.sim.gui(wpi.platforms.desktop, false)

    implementation 'com.ctre.phoenix:api-java:5.17.3'
    implementation 'com.ctre.phoenix:wpiapi-java:5.17.3'
    implementation 'com.kauailabs.navx.frc:navx-java:3.1.400'

    implementation 'com.hazelcast:hazelcast:3.12.6'
    implementation 'com.hazelcast:hazelcast-client:3.12.6'

    // TODO: need to update sparkmax
    // implementation 'com.revrobotics.frc:SparkMax-java:1.1.8'
    implementation 'org.apache.logging.log4j:log4j-api:2.11.2'
    implementation 'org.apache.logging.log4j:log4j-core:2.11.2'
    implementation 'commons-io:commons-io:2.6'
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
}


// task copyWpiSourceJar( type: Copy ) {
//   def sources = configurations.runtime.resolvedConfiguration.resolvedArtifacts.findAll{ a -> a.name == 'wpilibj-java'}.collect { artifact ->
//         project.dependencies.create( [
//             group: artifact.moduleVersion.id.group,
//             name: artifact.moduleVersion.id.name,
//             version: artifact.moduleVersion.id.version,
//             classifier: 'sources'
//         ] )
//   }

//   from zipTree(configurations.detachedConfiguration( sources as Dependency[] )
//     .resolvedConfiguration.lenientConfiguration.getFiles( Specs.SATISFIES_ALL )[0])
//   into file( 'wpi-sources/')

//   doLast {
//     delete fileTree('wpi-sources') {
//         include '**/*.jar'
//     }
//   }
// }

// task wpiJavadoc(type: Javadoc) {
//     dependsOn copyWpiSourceJar
//     source = file 'wpi-sources'
//     destinationDir = file 'wpi-doc'
//     classpath = sourceSets.main.runtimeClasspath
//     options.addStringOption('--frames')

// }

task(runDataClient, dependsOn: 'classes', type: JavaExec) {
    main = 'frc.team6027.robot.client.DataClient'
    classpath = sourceSets.main.runtimeClasspath
    systemProperty 'log4j.configurationFile', './src/main/resources/log4j2-local.xml'
}

task(testClass, dependsOn: 'classes', type: JavaExec) {
    main = 'frc.team6027.robot.commands.autonomous.ScheduleCommand'
    classpath = sourceSets.main.runtimeClasspath
    systemProperty 'log4j.configurationFile', './src/main/resources/log4j2-local.xml'
}